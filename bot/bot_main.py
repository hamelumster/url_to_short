import os
from contextlib import asynccontextmanager
from telegram import Update
from telegram.ext import ContextTypes, ApplicationBuilder, CommandHandler, MessageHandler, filters
from db.db_core import AsyncSessionLocal
from db.db_usage import DatabaseManager


token = os.getenv("TOKEN")

class Bot:
    def __init__(self, token: str):
        self.token = token
        self.app = ApplicationBuilder().token(self.token).build()
        self._register_handlers()
        self.session = AsyncSessionLocal

    def _register_handlers(self):
        self.app.add_handler(CommandHandler("start", self.start))
        self.app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))

    @asynccontextmanager
    async def with_db_session(self):
        session = self.session()
        try:
            yield DatabaseManager(session)
            await session.commit()
        except Exception as e:
            await session.rollback()
            print(f"–û—à–∏–±–∫–∞ –≤ —Å–µ—Å—Å–∏–∏ –ë–î: {e}")
            raise
        finally:
            await session.close()

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            input_text = update.message.text
            user_id = update.message.from_user.id
            username = update.message.from_user.username or f"user_{user_id}"

            async with self.with_db_session() as db_manager:
                user = await db_manager.get_or_create_user(user_id, username)

                input_entry = await db_manager.save_input_text(user.id, input_text)
                output_entry = await db_manager.generate_short_url(input_entry)

            if output_entry:
                await update.message.reply_text(f"‚úÖ –í–∞—à–∞ –∫–æ—Ä–æ—Ç–∫–∞—è —Å—Å—ã–ª–∫–∞:\n\n{output_entry.short_url}")
            else:
                await update.message.reply_text("üìù –í–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å—Å—ã–ª–∫–æ–π.\n"
                                                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å http")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {str(e)}")
            await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            user = update.message.from_user
            async with self.with_db_session() as db_manager:
                db_user = await db_manager.get_or_create_user(user.id, user.username or f"user_{user.id}")
            await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Å–æ–∫—Ä–∞—Ç–∏—Ç—å —Ç–≤–æ–∏ —Å—Å—ã–ª–∫–∏.\n–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ URL.")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ start: {str(e)}")
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")

    # def run(self):
    #     self.app.run_polling()

    # –ú–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤—Ö–æ–¥—è—â–∏–µ Webhook-–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    async def process_update(self, update: dict):
        telegram_update = Update.de_json(update, self.app.bot)
        await self.app.process_update(telegram_update)
